function [ndeStk, vlcStk, alpStk] = LDDMM(iniNdeMat, iniAlpStk, disObj, ...
                                          knlOrder, knlWidth, timeEnd, timeStp, optObj)

[dimNum, ndeNum] = size(iniNdeMat);
timeNum = floor(timeEnd / timeStp) + 1;

dfmElmIfoMat = getElmIfo(disObj.dfmElmVtxMat, ndeNum);
disObj.dfmElmVtxMat = int32(disObj.dfmElmVtxMat - 1);

if isempty(iniAlpStk)
	iniAlpVec = zeros(dimNum * ndeNum * (timeNum - 1), 1);
else
	iniAlpVec = iniAlpStk(:);
end

if dimNum == 2

	optAlpVec = LDDMM2D(iniNdeMat, iniAlpVec, ...
	                    disObj.dfmElmVtxMat, dfmElmIfoMat, ...
	                    disObj.tgtCenPosMat, disObj.tgtElmVolVec, disObj.tgtUniDirMat, ...
	                    disObj.cenKnlType, disObj.cenKnlWidth, ...
	                    disObj.dirKnlType, disObj.dirKnlWidth, disObj.disWgt, ...
	                    knlOrder, knlWidth, timeStp, timeNum, ...
	                    optObj.MaxIterations, optObj.OptimalityTolerance, ...
	                    optObj.Wolfe1, optObj.Wolfe2, optObj.Columns, optObj.Verbose);

elseif dimNum == 3
	
	optAlpVec = LDDMM3D(iniNdeMat, iniAlpVec, ...
	                    disObj.dfmElmVtxMat, dfmElmIfoMat, ...
	                    disObj.tgtCenPosMat, disObj.tgtElmVolVec, disObj.tgtUniDirMat, ...
	                    disObj.cenKnlType, disObj.cenKnlWidth, ...
	                    disObj.dirKnlType, disObj.dirKnlWidth, disObj.disWgt, ...
	                    knlOrder, knlWidth, timeStp, timeNum, ...
	                    optObj.MaxIterations, optObj.OptimalityTolerance, ...
	                    optObj.Wolfe1, optObj.Wolfe2, optObj.Columns, optObj.Verbose);

else

	error('LDDMM:dim', 'LDDMM only supports 2D and 3D.');

end

alpStk = reshape(optAlpVec, dimNum, ndeNum, timeNum - 1);
[ndeStk, vlcStk] = computeNodePosition(iniNdeMat, alpStk, ...
                                       knlOrder, knlWidth, timeStp, timeNum);
